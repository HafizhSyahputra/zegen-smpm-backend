// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  role_id    Int
  region_id  Int?
  vendor_id  Int?
  name       String
  email      String    @unique
  password   String
  npp        String    @unique
  dob        DateTime?
  phone      String?
  created_by Int?
  updated_by Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  role        Role          @relation(fields: [role_id], references: [id])
  region      Region?       @relation(fields: [region_id], references: [id])
  vendor      Vendor?       @relation(fields: [vendor_id], references: [id])
  UserSession UserSession[]

  UserNotification UserNotification[]
}

model Notification {
  id         Int       @id @default(autoincrement())
  title      String
  detail     String    @db.Text
  category   String
  createdAt  DateTime  @default(now()) @map("created_at")
  read       Boolean   @default(false)
  readat     DateTime? @map("read_at")
  created_by Int?
  updated_by Int?
  link       String?

  RoleNotification RoleNotification[]
  UserNotification UserNotification[]
}

model RoleNotification {
  roleId         Int
  notificationId Int

  role         Role         @relation(fields: [roleId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@id([roleId, notificationId])
  @@unique([roleId, notificationId])
}

model UserNotification {
  id             Int       @id @default(autoincrement())
  userId         Int
  notificationId Int
  read           Boolean   @default(false)
  readAt         DateTime?
  created_at     DateTime  @default(now())

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId])
}

model UserSession {
  id            Int       @id @default(autoincrement())
  user_id       Int
  identifier    String
  access_token  String?
  refresh_token String?
  created_by    Int?
  updated_by    Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  user User @relation(fields: [user_id], references: [id])

  @@unique([user_id, identifier])
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  code        String    @unique
  type        String
  description String?
  created_by  Int?
  updated_by  Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  isActive    Boolean   @default(true)

  User            User[]
  Role_Permission Role_Permission[]
  Menu_Role       Menu_Role[]

  Role_Action Role_Action[]

  RoleNotification RoleNotification[]
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  isActive    Boolean   @default(true)

  Role_Permission Role_Permission[]
}

model Role_Permission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId Int
}

model Role_Action {
  id_role_action Int          @id @default(autoincrement())
  role           Role?        @relation(fields: [id_role], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_role        Int?
  menu_action    Menu_Action? @relation(fields: [id_menu_action], references: [id_menu_action], onDelete: Cascade, onUpdate: Cascade)
  id_menu_action Int?
}

model Menu {
  id_menu    Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  routh      String?   @db.VarChar(255)
  path       String?   @db.VarChar(255)
  api_path   String?   @db.VarChar(255)
  icon       String?   @db.VarChar(255)
  parent     Int?
  platform   String    @db.VarChar(255)
  isActive   Boolean   @db.Bit
  order      Int
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime? @default(now())

  Menu_Action Menu_Action[]

  MenuRole Menu_Role[]
}

model Menu_Action {
  id_menu_action Int       @id @default(autoincrement())
  menu           Menu?     @relation(fields: [id_menu], references: [id_menu], onDelete: Cascade, onUpdate: Cascade)
  id_menu        Int?
  name           String    @db.VarChar(255)
  action         String    @db.VarChar(255)
  isActive       Boolean   @db.Bit
  created_by     Int
  updated_by     Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime? @default(now())

  Role_Action Role_Action[]
}

model Menu_Role {
  id_menu_role Int   @id @default(autoincrement())
  menu         Menu? @relation(fields: [id_menu], references: [id_menu], onDelete: Cascade, onUpdate: Cascade)
  id_menu      Int?
  role         Role? @relation(fields: [id_role], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_role      Int?
}

model Vendor {
  id                           Int                            @id @default(autoincrement())
  name                         String
  code                         String?                        @unique
  description                  String?
  created_by                   Int?
  updated_by                   Int?
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  deleted_at                   DateTime?
  User                         User[]
  ElectronicDataCaptureMachine ElectronicDataCaptureMachine[]
  JobOrder                     JobOrder[]

  Approved Approved[]

  ReceivedIn ReceivedIn[]

  ReceivedOut ReceivedOut[]

  // DocumentVendor DocumentVendor[]

  PreventiveMaintenanceReport PreventiveMaintenanceReport[]

  ActivityVendorReport ActivityVendorReport[]
}

model Region {
  id          Int        @id @default(autoincrement())
  name        String
  code        String     @unique
  description String?
  created_by  Int?
  updated_by  Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?
  User        User[]
  Merchant    Merchant[]
  JobOrder    JobOrder[]

  Approved Approved[]

  ReceivedIn ReceivedIn[]

  ReceivedOut ReceivedOut[]

  // DocumentMerchant DocumentMerchant[]

  // DocumentVendor DocumentVendor[]
}

model Merchant {
  id            Int       @id @default(autoincrement())
  region_id     Int
  mid           String    @unique
  name          String
  category      String
  customer_name String
  telephone     String?
  pic           String
  phone1        String
  phone2        String?
  address1      String
  address2      String
  address3      String
  address4      String
  district      String?
  subdistrict   String?
  city          String?
  province      String?
  postal_code   String
  status        String
  created_by    Int?
  updated_by    Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  region Region @relation(fields: [region_id], references: [id])

  // DocumentMerchant DocumentMerchant[]
  // DocumentVendor DocumentVendor[]

  ReceivedIn ReceivedIn[]

  ElectronicDataCaptureMachine ElectronicDataCaptureMachine[]

  ReceivedOut ReceivedOut[]

  JobOrder JobOrder[]

  ApproveMerchant ApproveMerchant[]

  PreventiveMaintenanceReport PreventiveMaintenanceReport[]

  ActivityVendorReport ActivityVendorReport[]
}

model ApproveMerchant {
  id          Int       @id @default(autoincrement())
  merchant_id Int?
  type        String    @db.VarChar(255)
  status      String    @db.VarChar(255)
  reason      String?
  info_remark String?
  DataBefore  String    @db.Text
  DataAfter   String    @db.Text
  approved_by Int?
  rejected_by Int?
  created_by  Int?
  updated_by  Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime
  deleted_at  DateTime?

  merchant Merchant? @relation(fields: [merchant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model DocumentMerchant {
  id            Int       @id @default(autoincrement())
  // merchant_id   Int
  // region_id  Int
  merchant_name String?
  location      String    @db.Text
  longitude     String    @db.Text
  latitude      String    @db.Text
  file1         String?   @db.Text
  file2         String?   @db.Text
  created_by    Int?
  updated_by    Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  // merchant Merchant @relation(fields: [merchant_id], references: [id])
  // region   Region   @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model DocumentVendor {
  id                 Int       @id @default(autoincrement())
  job_order_no       String
  // mid          String
  // tid          String
  // vendor_id    Int
  // region_id    Int
  edc_brand          String?
  edc_type           String?
  jo_type            String?
  vendor_name        String?
  tanggal_perjanjian DateTime?
  file1              String?   @db.Text
  file2              String?   @db.Text
  created_by         Int?
  updated_by         Int?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deleted_at         DateTime?

  // merchant Merchant                     @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction)
  // edc      ElectronicDataCaptureMachine @relation(fields: [tid], references: [tid], onDelete: NoAction, onUpdate: NoAction)
  // region   Region                       @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // vendor   Vendor                       @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobOrder JobOrder @relation(fields: [job_order_no], references: [no], onDelete: NoAction, onUpdate: NoAction)
}

model ElectronicDataCaptureMachine {
  id                  Int       @id @default(autoincrement())
  owner_id            Int?
  merchant_id         Int?
  mid                 String
  tid                 String    @unique
  brand               String
  status_edc          String?
  brand_type          String
  serial_number       String    @unique
  status_owner        String
  status_owner_desc   String?
  status_machine      String
  status_machine_desc String?
  status_active       Boolean
  simcard_provider    String?
  simcard_number      String?
  info                String?
  kondisibarang       String?
  region              String?
  created_by          Int?
  updated_by          Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?

  owner      Vendor?      @relation(fields: [owner_id], references: [id])
  merchant   Merchant?    @relation(fields: [merchant_id], references: [id])
  ReceivedIn ReceivedIn[]

  ReceivedOut ReceivedOut[]

  // JobOrder JobOrder[]

  // DocumentVendor DocumentVendor[]

  ActivityVendorReport ActivityVendorReport[]
}

model NominalJobOrder {
  id         Int       @id @default(autoincrement())
  jenis      String
  nominal    String
  tipe       String
  created_by Int?
  updated_by Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  JobOrder JobOrder[]
}

model JobOrder {
  id                                                         Int       @id @default(autoincrement())
  vendor_id                                                  Int
  region_id                                                  Int
  no                                                         String    @unique
  type                                                       String
  date                                                       DateTime  @db.Date
  nominal_id                                                 Int?
  mid                                                        String
  tid                                                        String
  officer_name                                               String?
  status                                                     String
  merchant_name                                              String
  address1                                                   String
  address2                                                   String
  address3                                                   String
  address4                                                   String
  subdistrict                                                String?
  village                                                    String?
  city                                                       String?
  postal_code                                                String?
  pic                                                        String
  phone_number1                                              String
  phone_number2                                              String?
  provider                                                   String?
  trx_type_mini_atm                                          String?
  trx_type_visa                                              String?
  trx_type_master                                            String?
  trx_type_jcb                                               String?
  trx_type_maestro                                           String?
  trx_type_gpn                                               String?
  trx_type_tapcash_topup                                     String?
  trx_type_tapcash_purchase                                  String?
  trx_type_qrcode_qris                                       String?
  trx_type_qrcode_linkaja                                    String?
  trx_type_contactless_master                                String?
  trx_type_contractless_visa                                 String?
  edc_facility_cepp_plan1                                    String?
  edc_facility_cepp_plan2                                    String?
  edc_facility_cepp_plan3                                    String?
  edc_facility_reedem_point                                  String?
  edc_facility_activation_keyinsales                         String?
  edc_facility_activation_keyinsales_keyinpreauth_completion String?
  edc_facility_activation_keyinpreauth_completion            String?
  edc_facility_activation_preauth_completion                 String?
  edc_facility_activation_keyinsales_preauth_completion      String?
  edc_facility_offline                                       String?
  edc_facility_card_ver                                      String?
  edc_facility_refund                                        String?
  edc_facility_adjust_tip                                    String?
  trx_test_credit                                            String?
  trx_test_debit                                             String?
  trx_test_inquiry                                           String?
  trx_test_transfer                                          String?
  trx_test_jcb                                               String?
  trx_test_gpn                                               String?
  trx_test_tapcash                                           String?
  trx_test_qris                                              String?
  trx_test_linkaja                                           String?
  trx_test_visa_contactless                                  String?
  trx_test_master_contactless                                String?
  trx_test_instalment                                        String?
  trx_test_reedemption                                       String?
  thermal_paper                                              Int
  sticker_bni                                                String?
  acrylic                                                    String?
  description1                                               String?
  description2                                               String?
  merchant_category                                          String?
  ownership                                                  String
  created_by                                                 Int?
  updated_by                                                 Int?
  created_at                                                 DateTime  @default(now())
  updated_at                                                 DateTime  @updatedAt
  deleted_at                                                 DateTime?

  nominal  NominalJobOrder? @relation(fields: [nominal_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vendor   Vendor           @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  region   Region           @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  merchant Merchant         @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction)
  // edc ElectronicDataCaptureMachine @relation(fields: [tid], references: [tid], onDelete: NoAction, onUpdate: NoAction)

  JobOrderReport JobOrderReport[]

  Approved Approved[]

  ReceivedIn ReceivedIn[]

  ReceivedOut ReceivedOut[]

  DocumentVendor DocumentVendor[]

  PreventiveMaintenanceReport PreventiveMaintenanceReport[]

  StagingJobOrder StagingJobOrder[]

  ActivityVendorReport ActivityVendorReport[]
}

model Staging {
  id_staging  Int      @id @default(autoincrement())
  name        String
  staging     Int      @unique
  description String?
  created_by  Int?
  updated_by  Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  StagingJobOrder StagingJobOrder[]
}

model StagingJobOrder {
  id             Int       @id @default(autoincrement())
  job_order_no   String
  jo_report_id   Int?
  pm_report_id   Int?
  staging_id     Int
  petugas        String?
  text           String?
  reason         String?
  photo_evidence String?
  photo_optional String?
  info_remark    String?
  created_by     Int?
  updated_by     Int?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  staging                     Staging                      @relation(fields: [staging_id], references: [staging], onDelete: NoAction, onUpdate: NoAction)
  jobOrder                    JobOrder                     @relation(fields: [job_order_no], references: [no], onDelete: NoAction, onUpdate: NoAction)
  jobOrderReport              JobOrderReport?              @relation(fields: [jo_report_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preventiveMaintenanceReport PreventiveMaintenanceReport? @relation(fields: [pm_report_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Approved {
  id           Int       @id @default(autoincrement())
  jo_report_id Int?
  pm_report_id Int?
  id_jobOrder  Int
  vendor_id    Int
  region_id    Int
  reason       String?   @db.Text
  info_remark  String?   @db.Text
  status       String    @db.Text
  approved_by  Int?
  rejected_by  Int?
  created_by   Int?
  updated_by   Int?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  jobOrderReport              JobOrderReport?              @relation(fields: [jo_report_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preventiveMaintenanceReport PreventiveMaintenanceReport? @relation(fields: [pm_report_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobOrder                    JobOrder                     @relation(fields: [id_jobOrder], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vendor                      Vendor                       @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  region                      Region                       @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Media {
  id                               Int                                @id @default(autoincrement())
  filename                         String
  ext                              String
  size                             Int
  mime                             String
  path                             String
  destination                      String
  created_by                       Int?
  updated_by                       Int?
  created_at                       DateTime                           @default(now())
  updated_at                       DateTime                           @updatedAt
  deleted_at                       DateTime?
  MediaJobOrderReportProofOfVisit  MediaJobOrderReportProofOfVisit[]
  MediaJobOrderReportOptionalPhoto MediaJobOrderReportOptionalPhoto[]
}

// model JobOrderResultParameter {
//   id                Int       @id @default(autoincrement())
//   key               String?   @unique
//   widget            String
//   label             String
//   label_description String?
//   label_hint        String?
//   options           String?
//   is_required       Boolean   @default(true)
//   is_default        Boolean   @default(false)
//   is_active         Boolean   @default(true)
//   order             Int
//   created_by        Int?
//   updated_by        Int?
//   created_at        DateTime  @default(now())
//   updated_at        DateTime  @updatedAt
//   deleted_at        DateTime?
// }

// model JobOrderResultParameterValue {
//   id                            Int       @id @default(autoincrement())
//   job_order_result_parameter_id Int
//   widget                        String
//   label                         String
//   label_description             String?
//   label_hint                    String?
//   value                         String?
//   created_by                    Int?
//   updated_by                    Int?
//   created_at                    DateTime  @default(now())
//   updated_at                    DateTime  @updatedAt
//   deleted_at                    DateTime?
// }

model JobOrderReport {
  id                       Int       @id @default(autoincrement())
  job_order_no             String
  nominal                  String?
  status                   String
  status_approve           String    @default("Waiting")
  reason                   String?
  info_remark              String?
  edc_brand                String
  edc_brand_type           String
  edc_serial_number        String
  edc_note                 String?
  edc_action               String?
  edc_second_brand         String?
  edc_second_brand_type    String?
  edc_second_serial_number String?
  edc_second_note          String?
  edc_second_action        String?
  information              String
  arrival_time             DateTime?
  start_time               DateTime?
  end_time                 DateTime?
  communication_line       String?
  direct_line_number       String?
  simcard_provider         String?
  paper_supply             String?
  merchant_pic             String?
  merchant_pic_phone       String?
  swipe_cash_indication    String?
  created_by               Int?
  updated_by               Int?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  deleted_at               DateTime?

  job_order                        JobOrder                           @relation(fields: [job_order_no], references: [no])
  MediaJobOrderReportProofOfVisit  MediaJobOrderReportProofOfVisit[]
  MediaJobOrderReportOptionalPhoto MediaJobOrderReportOptionalPhoto[]
  JobOrderReportMaterialTraining   JobOrderReportMaterialTraining[]
  JobOrderReportMaterialPromo      JobOrderReportMaterialPromo[]
  JobOrderReportProduct            JobOrderReportProduct[]
  JobOrderReportEdcEquipmentDongle JobOrderReportEdcEquipmentDongle[]

  Approved Approved[]

  StagingJobOrder StagingJobOrder[]
}

model ActivityVendorReport {
  id                    Int       @id @default(autoincrement())
  job_order_no          String
  vendor_id             Int
  nominal               String?
  mid                   String
  tid                   String
  status                String
  jenis                 String
  description           String
  amount                Int
  petugas               String
  location              String?
  edc_brand             String
  edc_brand_type        String
  edc_serial_number     String
  edc_note              String?
  edc_action            String?
  information           String
  arrival_time          DateTime?
  start_time            DateTime?
  end_time              DateTime?
  communication_line    String?
  direct_line_number    String?
  simcard_provider      String?
  paper_supply          String?
  merchant_pic          String?
  merchant_pic_phone    String?
  swipe_cash_indication String?
  created_by            Int?
  updated_by            Int?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted_at            DateTime?

  edc       ElectronicDataCaptureMachine @relation(fields: [tid], references: [tid], onDelete: NoAction, onUpdate: NoAction)
  merchant  Merchant                     @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction)
  vendor    Vendor                       @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_order JobOrder                     @relation(fields: [job_order_no], references: [no], onDelete: NoAction, onUpdate: NoAction)
}

model PreventiveMaintenanceReport {
  id                    Int       @id @default(autoincrement())
  job_order_no          String
  vendor_id             Int
  nominal               String?
  mid                   String
  status                String
  status_approve        String    @default("Waiting")
  reason                String?
  info_remark           String?
  edc_brand             String
  edc_brand_type        String
  edc_serial_number     String
  edc_note              String?
  edc_action            String?
  information           String
  arrival_time          DateTime?
  start_time            DateTime?
  end_time              DateTime?
  communication_line    String?
  direct_line_number    String?
  simcard_provider      String?
  paper_supply          String?
  merchant_pic          String?
  merchant_pic_phone    String?
  swipe_cash_indication String?
  created_by            Int?
  updated_by            Int?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted_at            DateTime?

  merchant                         Merchant                           @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction)
  vendor                           Vendor                             @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_order                        JobOrder                           @relation(fields: [job_order_no], references: [no], onDelete: NoAction, onUpdate: NoAction)
  MediaJobOrderReportProofOfVisit  MediaJobOrderReportProofOfVisit[]
  MediaJobOrderReportOptionalPhoto MediaJobOrderReportOptionalPhoto[]
  JobOrderReportMaterialTraining   JobOrderReportMaterialTraining[]
  JobOrderReportMaterialPromo      JobOrderReportMaterialPromo[]
  JobOrderReportProduct            JobOrderReportProduct[]
  JobOrderReportEdcEquipmentDongle JobOrderReportEdcEquipmentDongle[]

  Approved Approved[]

  StagingJobOrder StagingJobOrder[]
}

model JobOrderReportProduct {
  id                  Int       @id @default(autoincrement())
  job_order_report_id Int?
  pm_report_id        Int?
  product             String
  serial_number       String
  note                String?
  action              String?
  created_by          Int?
  updated_by          Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?

  job_order_report JobOrderReport?              @relation(fields: [job_order_report_id], references: [id])
  pm_report        PreventiveMaintenanceReport? @relation(fields: [pm_report_id], references: [id])
}

model JobOrderReportEdcEquipmentDongle {
  id                      Int             @id @default(autoincrement())
  job_order_report        JobOrderReport? @relation(fields: [job_order_report_id], references: [id])
  job_order_report_id     Int?
  pm_report_id            Int?
  battery_cover           Boolean         @default(false)
  battery                 Boolean         @default(false)
  edc_adapter             Boolean         @default(false)
  edc_bracket             Boolean         @default(false)
  edc_holder              Boolean         @default(false)
  dongle_holder           Boolean         @default(false)
  dongle_adapter          Boolean         @default(false)
  cable_ecr               Boolean         @default(false)
  cable_lan               Boolean         @default(false)
  cable_telephone_line    Boolean         @default(false)
  mid_tid                 Boolean         @default(false)
  magic_box               Boolean         @default(false)
  transaction_guide       Boolean         @default(false)
  pin_cover               Boolean         @default(false)
  telephone_line_splitter Boolean         @default(false)
  sticker_bank            Boolean         @default(false)
  sticer_dongle           Boolean         @default(false)
  sticer_gpn              Boolean         @default(false)
  sticker_qrcode          Boolean         @default(false)
  created_by              Int?
  updated_by              Int?
  created_at              DateTime        @default(now())
  updated_at              DateTime        @updatedAt
  deleted_at              DateTime?

  pm_report PreventiveMaintenanceReport? @relation(fields: [pm_report_id], references: [id])
}

model JobOrderReportMaterialPromo {
  id                  Int       @id @default(autoincrement())
  job_order_report_id Int?
  pm_report_id        Int?
  flyer               Boolean   @default(false)
  tent_card           Boolean   @default(false)
  holder_card         Boolean   @default(false)
  holder_pen          Boolean   @default(false)
  holder_bill         Boolean   @default(false)
  sign_pad            Boolean   @default(false)
  pen                 Boolean   @default(false)
  acrylic_open_close  Boolean   @default(false)
  logo_sticker        Boolean   @default(false)
  banner              Boolean   @default(false)
  created_by          Int?
  updated_by          Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?

  job_order_report JobOrderReport? @relation(fields: [job_order_report_id], references: [id])

  pm_report PreventiveMaintenanceReport? @relation(fields: [pm_report_id], references: [id])
}

model JobOrderReportMaterialTraining {
  id                          Int       @id @default(autoincrement())
  job_order_report_id         Int?
  pm_report_id                Int?
  fraud_awareness             Boolean   @default(false)
  sale_void_settlement_logon  Boolean   @default(false)
  installment                 Boolean   @default(false)
  audit_report                Boolean   @default(false)
  top_up                      Boolean   @default(false)
  redeem_point                Boolean   @default(false)
  cardverif_preauth_offline   Boolean   @default(false)
  manual_key_in               Boolean   @default(false)
  tips_adjust                 Boolean   @default(false)
  mini_atm                    Boolean   @default(false)
  fare_non_fare               Boolean   @default(false)
  dcc_download_bin            Boolean   @default(false)
  first_level_maintenance     Boolean   @default(false)
  transaction_receipt_storage Boolean   @default(false)
  created_by                  Int?
  updated_by                  Int?
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @updatedAt
  deleted_at                  DateTime?

  job_order_report JobOrderReport?              @relation(fields: [job_order_report_id], references: [id])
  pm_report        PreventiveMaintenanceReport? @relation(fields: [pm_report_id], references: [id])
}

model MediaJobOrderReportProofOfVisit {
  id                  Int       @id @default(autoincrement())
  media_id            Int
  job_order_report_id Int?
  pm_report_id        Int?
  created_by          Int?
  updated_by          Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?

  media            Media                        @relation(fields: [media_id], references: [id])
  job_order_report JobOrderReport?              @relation(fields: [job_order_report_id], references: [id])
  pm_report        PreventiveMaintenanceReport? @relation(fields: [pm_report_id], references: [id])
}

model MediaJobOrderReportOptionalPhoto {
  id                  Int       @id @default(autoincrement())
  media_id            Int
  job_order_report_id Int?
  pm_report_id        Int?
  created_by          Int?
  updated_by          Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?

  media            Media                        @relation(fields: [media_id], references: [id])
  job_order_report JobOrderReport?              @relation(fields: [job_order_report_id], references: [id])
  pm_report        PreventiveMaintenanceReport? @relation(fields: [pm_report_id], references: [id])
}

model EdcBrandType {
  id          Int       @id @default(autoincrement())
  brand       String
  type        String
  description String?
  created_by  Int?
  updated_by  Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@unique([brand, type])
}

model LookUp {
  id         Int       @id @default(autoincrement())
  name       String
  category   String
  created_by Int?
  updated_by Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model AuditTrail {
  id           Int       @id @default(autoincrement())
  Url          String    @db.VarChar(255)
  ActionName   String    @db.VarChar(255)
  MenuName     String    @db.VarChar(255)
  DataBefore   String    @db.Text
  DataAfter    String    @db.Text
  UserName     String    @db.VarChar(255)
  IpAddress    String    @db.VarChar(255)
  ActivityDate DateTime
  Browser      String    @db.VarChar(255)
  OS           String    @db.VarChar(255)
  AppSource    String    @db.VarChar(20)
  created_by   Int
  updated_by   Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?
}

model ReceivedIn {
  id            Int                           @id @default(autoincrement())
  id_joborder   Int?
  joborder      JobOrder?                     @relation(fields: [id_joborder], references: [id])
  id_edc        Int?
  edc           ElectronicDataCaptureMachine? @relation(fields: [id_edc], references: [id], onDelete: NoAction, onUpdate: NoAction)
  id_region     Int?
  region        Region?                       @relation(fields: [id_region], references: [id], onDelete: NoAction, onUpdate: NoAction)
  id_vendor     Int?
  vendor        Vendor?                       @relation(fields: [id_vendor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  id_merchant   Int?
  merchant      Merchant?                     @relation(fields: [id_merchant], references: [id])
  petugas       String?
  kondisibarang String?
  status        String                        @default("waiting") @db.VarChar(255)
  approved_by   Int?
  created_by    Int?
  updated_by    Int?
  created_at    DateTime                      @default(now()) @db.Date
  updated_at    DateTime                      @updatedAt @db.Date
  serial_number String?                       @db.VarChar(100)
  tid           String?                       @db.VarChar(100)
  deleted_at    DateTime?
}

model ReceivedOut {
  id            Int                           @id @default(autoincrement())
  id_joborder   Int?
  joborder      JobOrder?                     @relation(fields: [id_joborder], references: [id])
  id_edc        Int?
  edc           ElectronicDataCaptureMachine? @relation(fields: [id_edc], references: [id], onDelete: NoAction, onUpdate: NoAction)
  id_region     Int?
  region        Region?                       @relation(fields: [id_region], references: [id], onDelete: NoAction, onUpdate: NoAction)
  id_vendor     Int?
  vendor        Vendor?                       @relation(fields: [id_vendor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  id_merchant   Int?
  merchant      Merchant?                     @relation(fields: [id_merchant], references: [id])
  petugas       String?
  kondisibarang String?
  status        String                        @default("waiting") @db.VarChar(255)
  approved_by   Int?
  created_by    Int?
  updated_by    Int?
  created_at    DateTime                      @default(now()) @db.Date
  updated_at    DateTime                      @updatedAt @db.Date
  serial_number String?                       @db.VarChar(100)
  tid           String?                       @db.VarChar(100)
  deleted_at    DateTime?
}

model Group_Wilayah {
  id_group   Int       @id @default(autoincrement())
  name_group String
  created_by Int?
  updated_by Int?
  created_at DateTime  @default(now()) @db.Date
  updated_at DateTime  @updatedAt @db.Date
  deleted_at DateTime?

  SLA_Region SLA_Region[]
}

model SLA_Region {
  id_sla       Int       @id @default(autoincrement())
  group_region Int
  action       String    @db.VarChar(255)
  scope        String    @db.VarChar(255)
  hour         Int?
  target       Int?
  created_by   Int?
  updated_by   Int?
  created_at   DateTime  @default(now()) @db.Date
  updated_at   DateTime  @updatedAt @db.Date
  deleted_at   DateTime?

  regionGroup Group_Wilayah? @relation(fields: [group_region], references: [id_group])
}
